// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique @db.VarChar(191)
  password String @db.VarChar(255)
  role     Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(191)
  description String? @db.Text
  price       Decimal @db.Decimal(10, 2)
  currency    String  @default("EUR") @db.Char(3)
  imageUrl    String? @db.VarChar(255)
  stock       Int     @default(0)
  isActive    Boolean @default(true)
  category    String? @db.VarChar(64)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  @@index([category])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Order {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  orderNumber String      @unique @db.VarChar(32)
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  currency    String      @default("EUR") @db.Char(3)

  shippingName     String  @db.VarChar(191)
  shippingAddress1 String  @db.VarChar(191)
  shippingAddress2 String? @db.VarChar(191)
  shippingCity     String  @db.VarChar(128)
  shippingZip      String  @db.VarChar(32)
  shippingCountry  String  @db.VarChar(64)

  note String? @db.Text

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  name     String  @db.VarChar(191)
  price    Decimal @db.Decimal(10, 2)
  quantity Int
  imageUrl String? @db.VarChar(255)

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}
